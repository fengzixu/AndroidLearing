/*
title:第二次学习日志
author:徐冉
include：构造方法的重载,告诉对象怎么做,对象工作的结果
date;2014/12/24----2014/12/25
*/

一、构造方法的重载
1、构造方法除了返回值类型还有函数名称有点特殊以外其余的行为和普通函数一样。
系统默认为我们提供了隐式的无任何参数的构造函数来共我们使用。当然，我们可以
自定义构造函数的行为。
2、函数的重载：首先，函数的重载针对的是函数名相同的函数，其次，函数重载是发生在类的内部，他和类的继承，在子类中重写父类的方法是不同的。继承发生在不同的类中，重载是发生在同一个类中。
函数的重载，在同名函数中，重载多个不同版本的函数，他们接受不同的外来数据，甚至是不接受数据，根据数据的不同从而执行不同的行为。这也是面向对象中，多态性的一种体现。
3.函数的重载主要跟两个参数相关：函数的参数的数据类型，函数参数的个数（PS：切记，和函数的返回值是没有关系的，尤其是在构造函数中，是没有返回值的）
当我们定义了不同版本的同名函数时（他们的形参类型不同，或者个数不同）,如果我们要调用我们刚刚定义的这些函数，就要根据这些函数中的形参的不同，从而传递给他们不同的数据，调取响应的版本进行执行。
/*
public class ChongZai{

	//没有任何参数的构造函数
	public ChongZai(){
		System.out.println("ChongZai的构造方法1");
	}

	//重载构造函数的要点：同名，参数不同，参数不同包括参数的类型和个数

	public ChongZai(int x){
		System.out.println("ChongZai的构造方法2");
	}

	//类型
	//attention:在调用这个方法的时候，要根据java的语言规则，在实参的后面加上f，表明传递的是浮点型数据
	public ChongZai(float x){
		System.out.println("ChongZai的构造方法3");
	}

	//类型&个数
	public ChongZai(int x, int y){
		System.out.println("ChongZai的构造方法4");
	}

	public static void main(String[] args){

		ChongZai obj1 = new ChongZai(1.35f);
		ChongZai obj2 = new ChongZai(1);

	}
}
*/

根据上面的实例的运行结果可以得出，在创建obj1的时候，执行的是构造方法3，创建obj2的时候执行的是构造方法2.这时我们就可以看出，当我们在创建对象并且同时要调取构造函数的时候，编译器会根据我们所传递参数的不同依次为我们检查这个名字函数的所有版本，形参和实参的类型以及个数都要严格对应，以至于我们的函数调用正确有效。检查函数参数的时候，按照从左向右依次对应的顺序进行检查，然后来确定调用函数的版本。

PS:java和C不同的是，在传递float类型的数据的时候，要记得在数字后面显示的标明这是一个浮点数。
另外，编译器在检查多个同名函数的时候，主要检查的是他们的名称和参数，和函数的返回值类型没有关系，如果你定义了两个同名函数，参数和名称都相同，但是你的返回值类型不同，java编译器也会认定这两个函数是同一个函数，报错。java中的方法之前都有一个访问权限的修饰符，private,public，这些也不能作为区分不同方法的证据。


二、告诉对象怎么做
1.一个函数，或者说是一个方法，都相当于一个具有特殊功能的盒子，这个盒子有入口，有出口，入口用来接收数据，出口用来返回数据。我们都知道，在类中，方法只有以套，但是对象，以及和对象有关的数据却有很多，所以，为了能让这一个方法针对不同的对象执行代码获得不同得结果，就得把必要的信息传递进去，告诉这个方法怎么做。这个时候就需要用到函数的参数传递。
2.传递参数就相当于是赋值操作一样，函数在入口处定义几个变量作为接收数据的容器，叫做形式参数，实际上我们真正传递给函数的是实际参数，每一次参数传递，都是实参对形参的赋值操作。

关于参数的传递有两种形式：
(1)传递普通变量：比如int double这种常规数据类型的变量，这种类型的参数在传递的时候，采用值传递，传递的是实际参数值的副本，也就是说，实际参数和形式参数都有独立的内存空间.参数的传递，就像变量赋值一样，把实际参数里面的数值传递到形式参数的内存空间中。所以，在函数内部对穿进来的数据进行处理，也就是对形参的修改，不对实际参数造成任何影响，因为我们传递的是数值的副本。

(2)传递复合数据类型：
在传递数组的时候，我们却发现，对形式参数的修改，影响到了函数外面的实际参数。这就证明在传递数组的时候，不知单纯的值传递，他传递的应该是这个数组在内存中的位置信息，以至于我们在函数的内外都能够对这一段内存空间中的数据进行修改。传递的方式依然是值传递，只不过此时传递的是地址值。

我们在支配函数让他们来计算我们的数据的时候，都应该传递给他属于我们的必要的计算信息，这就需要函数的参数传递来实现。

3.main函数和我们自定义的函数一样，也可以接受参数，main函数一般是被操作系统来调用的，所以再给main函数的string[] args数组传递参数的时候，要在terminal里面就写入要传递的参数，然后再main函数的内部便可以读取他们。




三、对象工作的结果
函数==一个具有特定功能的盒子，盒子的入口用来接受数据，那么盒子的出口就会为我们返回一些数据，返回的这些数据，就是这个函数执行的结果。
1.定义函数的时候有一个返回值类型，在函数中利用return 返回值 的形式来返回我们感兴趣的数据。但是要注意的是，return 后面表达式的值必须和函数定义时候的返回值类型一样才可以。
2.如果在函数中有多个return 语句，那么我们将只执行我们第一个能够执行到的return 语句，然后就会退出整个函数的调用。
3.函数如果要返回一个结果的话，那么原来的函数调用处就会被替换为这个返回值，你可以选择接收他，也可以选择忽略。如果想接受，就要定义一个数据类型符合的变量来进行接收，说白了就是函数的调用部分被替换成了一个特定类型的数据，准备赋值给一个变量。PS：如果函数返回值为空，则不用变量来接收。
4.返回数据的类型有三种：常规类型，void，符合类型。
其中常规类型比较简单，空类型的话，可以选择不加return语句，也可以加上return ;返回一个空值。
5.对于返回值的数据类型是一个复合型的数据，比如是数组的时候，我们也要相应的用数组对象来接收。但是，通过输入返回的结果我们发现，返回过来的是一个数组对象在内存当中的首地址，其实这也就验证了在参数传递时候，传递复合数据类型数据的解释。

还要注意的就是，之所以不能够读取出复合数据类型中的内容，就是因为这是一种很多相同简单数据类型数据的集合，我们不能一次性处理所有的元素，要依次处理集合当中的每一个元素才可以。


















