title:创建对象数组,一个对象如何调用另外一个对象，对象间的继承,方法的覆盖
author；xuran

一、创建对象数组
对象数组和普通类型的数组其实没有分别，数组都是一组具有相同数据类型的数据集合。只不过原来的数据元素是int这样的基本数据类型，现在元素的类型变成了一个类的对象的类型。对象数组当中的每一个元素都是该类的一个实际的对象，在使用中没有任何差别。

二、一个对象如何调用另外一个对象
这一节里面其实没有学到多少新的知识，说是对象间的调用，其实就是在一个类中去引用另外一个类的功能，而一个类的功能主要是由对象来具体实施的。所以是一个对象调用另外一个对象。
新的，我 不明白的东西就一个，java中很奇怪，比如A.java B.java两个java文件，两个文件里面都没有显示的提出有对方的存在，但是却能够互相的引用对方，也就是说，他们好像天生就知道对方存在一样。具体的细节不在追究，关于底层，学语言的时候不钻这种牛角尖。


三、对象间的继承，方法的覆盖
对象的继承其实就是类之间的继承。继承，其实还是对子类的对象影响较大。继承，就是把父类中关于对象的属性，方法的描述复制一份，方法子类的类定义中，也就是说，现在子类的对象不仅仅可以在自己的类中定义自己专属的属性或者行为，还具备了父类对象的属性和行为。如果子类对象调用一个在子类中不存在，但是在父类中存在的方法是完全可以的。

其实，类的继承中的方法的覆盖，还有方法的重载是一个联系比较密切的问题。并且在这里，我发现了JAVA语言和C++语言的一个重大的不同之处。

先说JAVA的：
JAVA中我们之前介绍过的函数的重载是在同一个类里面，由于函数的参数列表不同而被重载成不同版本的函数。而在两个类有继承关系的时候，如果我们继承了父类的一个方法，但是在子类中又想重写这个方法，也就是方法的覆盖，需要遵循两个准则：
1.子类重写父类的方法，返回值，函数名，参数列表必须严格相同
2.子类重写的方法的访问限制要大于父类的。

根据上面这两个我们可以重写父类中的一个函数。
之前跟大家讲过，java中的对象的继承是把父类对象的东西复制一份放在子类的定义中。如果我们现在不在子类中重写任何方法，而是对继承过来的函数进行一次重载，也就是参数列表不同。这个时候，虽然是在同一个类中，但是也实现了函数的重载。重载之后，我即可以调用继承过来的函数，也可以调用我们重载的那个版本。	

但是在C++中不是这样的，在继承的时候，如果父类中有一个名为a的函数，但是在子类中也有一个同名的函数只不过参数列表不同，这个时候，子类中的这个函数就会屏蔽掉父类当中同名的函数。我们再想让 子类对象调用父类中的那个成员方法是不行的。所以C++对于继承有严格的定义：继承是必须发生在两个类，两个不同的作用域之间的，重载必须要发生在同一个作用域，也就是说同一个类中间的。
ß