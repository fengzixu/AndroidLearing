title:到底调用哪一个方法,this和super,哪个类不该初始化,接口,包的组织结构,使用java API
author:xuran


一、到底调用哪一个方法
视频中提到了面向对象的多态性，以一个很好例子的体现。
father和son类中都有print方法，两个类是继承关系，如果在子类中有这样的语句
Father obj = new Son();
这个语句的意思就是创建一个子类的对象，但是最后赋值给了一个父类的对象。
当我们在执行obj.print()的时候。执行的是子类当中重写的print方法，如果此时我们在son类中再定义一个父类当中没有的函数temp的话，那么，obj.temp将会报错。

首先根据上面这个例子，我们可以知道有以下几点：
1、在类继承的过程中，创建子类对象，子类对象不但包含有子类当中新创建的属性和行为，还会包含父类当中的属性和行为
2、当我们把一个new好的子类对象赋值给父类对象的时候，这个父类的对象，只能识别，子类从父类中继承过来并且可以访问的那一部分。并且，如果是吧一个子类的对象创建之后赋值给一个父类的对象，并且子类重写了某些父类当中的方法的话，那么，被赋值的父类对象只能识别被重写的部分。
3、如果单就子类对象来说，如果在子类中重写了继承的函数(注意不是重载)，那么在子类中只能识别重写后的那个函数。也就是说，如果她自己有这个同名的方法，是不需要再去向父类里面寻求帮助了。
如果没有重写，只是重载了从父类中继承来的函数，那么子类对象即可以执行父类继承来的那个原版的函数，也可以执行自己重写的这个函数.

二、this和super
this不想多说了，只想的是调用这个方法的对象。
子类在继承父类的时候，创建子类对象要先执行父类的构造函数，然后再执行子类的构造函数。当然，执行的是默认的父类构造函数。如果想执行父类当中重载的一些构造函数的话，那么在相应的，子类要执行的构造方法中的『第一句话』添加:super()或者super(要传递的参数）。这样才能够显式的调用我们想要的父类的构造方法。super单独存在指定的是父类的对象，作为函数名的时候是父类的构造函数

三、哪些类不该初始化
我们在定义类的时候，类和类之间最常见的关系就是继承。按理说，任何一个类都是可以实例化一个对象的。但是有些特殊的类，是不能实例化的，比如动物类，植物类，等等，因为他们的范围比较大，又没有明显的共同特征，但是实际上互相又存在着继承关系。那么这种不能够实例化的类就是所谓的抽象类。在声明抽象类的时候要加上abstract关键字。

抽象类和普通类的区别如下：
1、抽象类在声明的时候必须加上关键字abstract
2、抽象类中不仅仅可以有普通的方法函数，还可以有特殊的抽象函数，抽象函数是没有函数体，又被关键字abstract修饰的函数。

但是为什么要有抽象方法这个东西呢，原因就是，抽象类当中可以声明一些所有动物共有的行为比如吃饭，但是不同种类的动物的吃饭方式不i一样，具体的吃饭方式要在子类中进行实际的实现，在抽象类中，做一个说明就可以，因为毕竟抽象类也要描述这一类群体的共同的性质和行为。
所以，抽象方法就是在抽象类中先声明，然后在子类中进行定义。一个类只要出现一个抽象方法，那么这个类就是抽象类。如果这个抽象方法在继承的过程中并没有实现，那么继承抽象类的并且没有定义抽象函数的子类就也变成了抽象类。	 

四、接口
接口，是java语言中新出现的一个名词把，在其他编程语言我确实没见过。
接口就是比抽象类还要高层次的抽象。接口由关键字interface来进行定义，接口的定义上，有以下几点需要注意：
1、接口中的所有的方法都必须是抽象方法，但是不用加abstract关键字，因为接口中方法默认是抽象的。
2、接口中的成员变量，必须是public static final的，而且，成员变量必须在定义接口的时候就进行初始化操作。其中,final是最终的，即这个变量的值不能够再被改变。
static表明这是一个静态成员变量，它所存放的位置是在内存中的静态存储区。 但是这些修饰符，在接口中是默认加上的，不用显示的增加。

接口和抽象类的工作一样，都是被子类继承然后在子类中进行实现。继承接口用的是implements关键字，在继承的子类中，必须实现全部的接口中的抽象方法。


五、在集成的IDE中，我们通常把java源码放在src文件夹下，并且把代码都放在一个叫做包的结构里，这个包其实就是文件夹。在java程序的开头部分加上package xxx;这样在编译的时候，该程序的class文件将会生成到这个包里面，也就是放在那个文件夹里面。也可以想IDE中，包名多写几层。比如：com.xuran.test； 他会依次生成三个文件夹，都是嵌套关系，class文件在最内层的文件夹内。这样一来，如果要执行某一包内的class文件，就要确定路径才行。
比如 java com.xuran.test.类名。
如果一个包里面的文件，想要引用另外一个包中的类的话，要使用import com.xuran.test.Base这种指定好确切的路径来引用。也可以用import com.xuran.test.*,即是把这个类中所有的类文件都引入进来。	


六、使用JAVA api也需要引入，就像C语言中的include机制一样。
唯一一个不同的就是，人和一个java文件，都默认包含了java.lang这个包的所有的内容可以使用。不用我们再显示的包含。



















